# Please refer https://docs.docker.com/compose to learn more about Docker Compose.

# This is a sample docker-compose file with two services
# 1. yourwebapp is an sample web service where the docker container image will be built from the Dockerfile as
#    part of starting the compose.
# 2. redis is an existing image hosted in docker hub.
version: "3.5"

services:
  # yourwebapp:
  #   image: yourwebapp
  #   build:
  #     context: .
  #     dockerfile: Dockerfile
  #   ports:
  #       - 80

  nginx-proxy:
    container_name: local-proxy
    image: jwilder/nginx-proxy
    ports:
      - 80:80
      - 443:443
    volumes:
      # nginx-proxyのドキュメント通りの記述
      - /var/run/docker.sock:/tmp/docker.sock:ro
      # mkcertで作成した証明書があるディレクトリをコンテナから読み込めるようにする
      - ./certs:/etc/nginx/certs
      # ローカル開発用に制御したいリバースプロキシーの設定
      - ./conf/my-default.conf:/etc/nginx/conf.d/my-default.conf
    networks:
      - local-network
    # 明示的に stop がされない限り、終了ステータスに関係なく常に再起動が行われる
    restart: always

  php-apache:
    build: ./docker/php-apache/
    # ドメインアクセスにするからもはやポートフォワーディングをする必要もない
    #    ports:
    #      - "8080:80"
    volumes:
      # プロジェクトディレクトリ自体を共有してapacheの方でDocumentRootを変える
      - .:/var/www/html
    environment:
      VIRTUAL_HOST: "myapp.local.localhost"
      CERT_NAME: "_wildcard.local.localhost" # これで_wildcard.local.localhost.crt と _wildcard.local.localhost.key が読み込まれる
      HTTPS_METHOD: "noredirect" # httpアクセスもしたい場合はこれでリダイレクトを無効にする
    networks:
      - myapp-network
      - local-network
    restart: always

networks:
  # コンテナ内で通信する為のネットワーク
  myapp-network:
    name: myapp-network
  # リバースプロキシからアクセスされる為のネットワーク
  local-network:
    name: local-network
    external: true # 外部ネットワークであることを宣言をしておけばdocker-compose downした時に消されない
